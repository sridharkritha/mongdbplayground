Object.defineProperty(Promise.prototype, "state", {
    get: function(){
        const o = {};
        return Promise.race([this, o]).then(
            v => v === o ? "pending" : "resolved",
            () => "rejected");
    }
});

// usage: console.log(await <Your Promise>.state);
(async () => {
    console.log(await Promise.resolve(2).state);  // "resolved"
    console.log(await Promise.reject(0).state);   // "rejected"
    console.log(await new Promise(()=>{}).state); // "pending"
})();


function promiseState(p) {
    const t = {};
    return Promise.race([p, t])
      .then(v => (v === t)? "pending" : "fulfilled", () => "rejected");
  }
  
  var a = Promise.resolve();
  var b = Promise.reject();
  var c = new Promise(() => {});
  
  promiseState(a).then(state => console.log(state)); // fulfilled
  promiseState(b).then(state => console.log(state)); // rejected
  promiseState(c).then(state => console.log(state)); // pending